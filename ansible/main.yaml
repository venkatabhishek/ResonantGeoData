---
- hosts: all
  vars:
    app_path: /home/ubuntu/ResonantGeoData
    venv: "{{ app_path }}/venv"
  tasks:
  - name: checkout code
    git:
      repo: "https://github.com/venkatabhishek/ResonantGeoData.git"
      dest: "{{ app_path }}"
      version: production
      force: yes

  - name: install pip
    apt: 
      pkg:
        - python3-dev
        - python3-pip
        - libpq-dev
      update_cache: yes
      state: present
    become: yes

  - name: docker python reqs + virtualenv
    pip:
      name: 
        - docker
        - docker-compose
        - virtualenv

  - name: create virtualenv
    shell:
      cmd: virtualenv {{ app_path }}/venv -p python3.8 

      
  - name: pip requirements
    pip:
      requirements: "{{ app_path }}/requirements.txt"
      extra_args: -e .[dev,worker]
      chdir: "{{ app_path }}"
      virtualenv: "{{ venv }}"

  - name: start docker service
    include_role:
      name: geerlingguy.docker
    vars:
      ansible_become: yes
      
  - name: tear down existing services
    community.docker.docker_compose:
      project_src: "{{ app_path }}"
      state: absent
    register: output
    become: yes

  - ansible.builtin.debug:
      var: output

  - name: pull images
    community.docker.docker_compose:
      project_src: "{{ app_path }}"
      pull: yes
      files:
        - docker-compose.yml
    register: output
    become: yes


  - ansible.builtin.debug:
      var: output

  - name: build images
    community.docker.docker_compose:
      project_src: "{{ app_path }}"
      build: yes
      files:
        - docker-compose.yml
    register: output
    become: yes

  - ansible.builtin.debug:
      var: output

  - name: start docker services
    community.docker.docker_compose:
      project_src: "{{ app_path }}"
      files:
        - docker-compose.yml
    register: output
    become: yes
  
  - name: run migrations
    django_manage:
      command: migrate
      app_path: "{{ app_path }}"
      virtualenv: "{{ venv }}"
    environment:
      DJANGO_CONFIGURATION: DevelopmentConfiguration
      DJANGO_DATABASE_URL: postgres://postgres:postgres@localhost:5432/django
      DJANGO_CELERY_BROKER_URL: amqp://localhost:5672/
      DJANGO_MINIO_STORAGE_ENDPOINT: localhost:9000
      DJANGO_MINIO_STORAGE_ACCESS_KEY: minioAccessKey
      DJANGO_MINIO_STORAGE_SECRET_KEY: minioSecretKey
      DJANGO_STORAGE_BUCKET_NAME: django-storage

  - name: create conf.d directory
    file:
      path: /etc/conf.d
      state: directory
    become: yes

  - name: create celery config
    template:
      src: ./celery/celery.j2
      dest: /etc/conf.d/celery
    become: yes

  - name: create celery service
    template:
      src: ./celery/celery.service.j2
      dest: /etc/systemd/system/celery.service
    become: yes

  - ansible.builtin.debug:
      var: output

  - name: create celery directories
    file:
      path: "{{ item }}"
      state: directory
      mode: 0777
    loop:
      - /var/log/celery
      - /var/run/celery
    become: yes

  - name: start celery service
    systemd:
      name: celery.service
      enabled: yes
      state: started
      daemon_reload: yes
    register: output
    become: yes

  - ansible.builtin.debug:
      var: output

  - name: create gunicorn config
    template:
      src: ./gunicorn/gunicorn.j2
      dest: /etc/conf.d/gunicorn
    become: yes

  - name: create gunicorn service
    template:
      src: ./gunicorn/gunicorn.service.j2
      dest: /etc/systemd/system/gunicorn.service
    become: yes

  - name: create gunicorn socket
    template:
      src: ./gunicorn/gunicorn.socket.j2
      dest: /etc/systemd/system/gunicorn.socket
    become: yes

  - name: start gunicorn socket
    systemd:
      name: gunicorn.socket
      enabled: yes
      state: started
      daemon_reload: yes
    register: output
    become: yes
    
  - ansible.builtin.debug:
      var: output

  - name: map port 8000 to socket
    shell: socat -d -d TCP4-LISTEN:8000,fork UNIX-CONNECT:/run/gunicorn.sock
